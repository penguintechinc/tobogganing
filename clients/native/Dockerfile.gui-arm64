# Docker build for SASEWaddle GUI client (ARM64)
# Optimized for ARM64 builds with cross-compilation toolchain

FROM golang:1.23-bullseye AS gui-builder-arm64

# Add ARM64 architecture and install cross-compilation tools
RUN dpkg --add-architecture arm64 && \
    apt-get update && apt-get install -y \
    gcc-aarch64-linux-gnu \
    libc6-dev-arm64-cross \
    pkg-config \
    git \
    && rm -rf /var/lib/apt/lists/*

# Install ARM64 GUI development dependencies
RUN apt-get update && apt-get install -y \
    libx11-dev:arm64 \
    libxcursor-dev:arm64 \
    libxrandr-dev:arm64 \
    libxinerama-dev:arm64 \
    libxi-dev:arm64 \
    libgl1-mesa-dev:arm64 \
    libglu1-mesa-dev:arm64 \
    libglfw3-dev:arm64 \
    libayatana-appindicator3-dev:arm64 \
    libgtk-3-dev:arm64 \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /src

# Copy go mod files
COPY go.mod go.sum ./
RUN go mod download

# Copy source code
COPY . .

# Build GUI client for ARM64
ARG VERSION=dev
ARG BUILD_TIME
ARG GIT_COMMIT
ENV CC=aarch64-linux-gnu-gcc
ENV PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig
ENV CGO_ENABLED=1
ENV GOOS=linux
ENV GOARCH=arm64

RUN go build \
    -ldflags="-X main.version=${VERSION} -X main.buildTime=${BUILD_TIME} -X main.gitCommit=${GIT_COMMIT} -w -s" \
    -o sasewaddle-client-gui \
    ./cmd/gui

# Test stage - verify the binary was built (use ARM64 base)
FROM arm64v8/ubuntu:20.04 AS test
RUN apt-get update && apt-get install -y file && rm -rf /var/lib/apt/lists/*
COPY --from=gui-builder-arm64 /src/sasewaddle-client-gui /tmp/
RUN file /tmp/sasewaddle-client-gui && \
    ls -la /tmp/sasewaddle-client-gui

# Final stage - minimal runtime image (ARM64)
FROM arm64v8/ubuntu:20.04
RUN apt-get update && apt-get install -y \
    libayatana-appindicator3-1 \
    libgtk-3-0 \
    libgl1-mesa-glx \
    && rm -rf /var/lib/apt/lists/*
COPY --from=gui-builder-arm64 /src/sasewaddle-client-gui /usr/local/bin/sasewaddle-client-gui
ENTRYPOINT ["/usr/local/bin/sasewaddle-client-gui"]