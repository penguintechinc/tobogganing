name: GUI Client Build

on:
  push:
    branches:
      - main
      - develop
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-macos-gui:
    name: Build macOS GUI Client
    runs-on: macos-latest
    strategy:
      matrix:
        include:
          - goarch: amd64
            binary_name: sasewaddle-client-darwin-amd64
          - goarch: arm64
            binary_name: sasewaddle-client-darwin-arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
      
      - name: Install dependencies
        working-directory: ./clients/native
        run: |
          go mod download
          go mod verify
      
      - name: Build GUI binary
        working-directory: ./clients/native
        env:
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 1
        run: |
          go build -ldflags="-w -s -X main.Version=${{ github.ref_name }}" \
            -o ../../dist/${{ matrix.binary_name }} \
            ./cmd/gui
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.binary_name }}
          path: dist/${{ matrix.binary_name }}

  build-linux-gui:
    name: Build Linux GUI Client
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        include:
          - goarch: amd64
            binary_name: sasewaddle-client-linux-amd64
          - goarch: arm64
            binary_name: sasewaddle-client-linux-arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          # Install GUI dependencies with fallbacks for different Ubuntu versions
          sudo apt-get install -y \
            libayatana-appindicator3-dev \
            libgtk-3-dev \
            pkg-config \
            build-essential || true
          
          # Ubuntu 24.04 uses libwebkitgtk packages (different naming)
          # Try all possible webkit package names for different Ubuntu versions
          sudo apt-get install -y libwebkit2gtk-4.1-dev 2>/dev/null || \
          sudo apt-get install -y libwebkitgtk-6.0-dev 2>/dev/null || \
          sudo apt-get install -y libwebkit2gtk-4.0-dev 2>/dev/null || \
          sudo apt-get install -y libwebkitgtk-4.1-dev 2>/dev/null || \
          sudo apt-get install -y libwebkitgtk-4.0-dev 2>/dev/null || \
          echo "Warning: webkit2gtk not available, GUI features may be limited"
      
      - name: Install cross-compilation dependencies (for ARM64)
        if: matrix.goarch == 'arm64'
        run: |
          sudo apt-get install -y \
            gcc-aarch64-linux-gnu \
            libayatana-appindicator3-dev:arm64 \
            libgtk-3-dev:arm64
      
      - name: Install dependencies
        working-directory: ./clients/native
        run: |
          go mod download
          go mod verify
      
      - name: Build GUI binary (AMD64)
        if: matrix.goarch == 'amd64'
        working-directory: ./clients/native
        env:
          GOARCH: amd64
          CGO_ENABLED: 1
        run: |
          go build -ldflags="-w -s -X main.Version=${{ github.ref_name }}" \
            -o ../../dist/${{ matrix.binary_name }} \
            ./cmd/gui

      - name: Build GUI binary (ARM64)
        if: matrix.goarch == 'arm64'
        working-directory: ./clients/native
        env:
          GOARCH: arm64
          CGO_ENABLED: 1
          CC: aarch64-linux-gnu-gcc
          PKG_CONFIG_PATH: /usr/lib/aarch64-linux-gnu/pkgconfig
        run: |
          go build -ldflags="-w -s -X main.Version=${{ github.ref_name }}" \
            -o ../../dist/${{ matrix.binary_name }} \
            ./cmd/gui
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.binary_name }}
          path: dist/${{ matrix.binary_name }}

  build-windows-gui:
    name: Build Windows GUI Client
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
      
      - name: Install dependencies
        working-directory: ./clients/native
        run: |
          go mod download
          go mod verify
      
      - name: Build GUI binary
        working-directory: ./clients/native
        env:
          GOARCH: amd64
          CGO_ENABLED: 1
        run: |
          go build -ldflags="-w -s -X main.Version=${{ github.ref_name }}" \
            -o ../../dist/sasewaddle-client-windows-amd64.exe \
            ./cmd/gui
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: sasewaddle-client-windows-amd64.exe
          path: dist/sasewaddle-client-windows-amd64.exe

  create-universal-binary:
    name: Create macOS Universal Binary
    needs: build-macos-gui
    runs-on: macos-latest
    
    steps:
      - name: Download Intel binary
        uses: actions/download-artifact@v4
        with:
          name: sasewaddle-client-darwin-amd64
          path: ./
      
      - name: Download ARM64 binary
        uses: actions/download-artifact@v4
        with:
          name: sasewaddle-client-darwin-arm64
          path: ./
      
      - name: Create Universal Binary
        run: |
          lipo -create -output sasewaddle-client-darwin-universal \
            sasewaddle-client-darwin-amd64 \
            sasewaddle-client-darwin-arm64
          chmod +x sasewaddle-client-darwin-universal
      
      - name: Upload Universal Binary
        uses: actions/upload-artifact@v4
        with:
          name: sasewaddle-client-darwin-universal
          path: sasewaddle-client-darwin-universal

  release:
    name: Create Release
    if: startsWith(github.ref, 'refs/tags/')
    needs: [build-macos-gui, build-linux-gui, build-windows-gui, create-universal-binary]
    runs-on: ubuntu-24.04
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
      
      - name: Create checksums
        run: |
          cd artifacts
          for dir in */; do
            cd "$dir"
            for file in *; do
              if [ -f "$file" ]; then
                sha256sum "$file" > "$file.sha256"
                mv "$file" "$file.sha256" ../
              fi
            done
            cd ..
          done
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            artifacts/sasewaddle-client-*
            artifacts/*.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}